#!/usr/bin/env python3
import sys
import linecache
import glob
import os

def default_files():
    search_path = os.getenv("IJGREP_DIR", "~/documents/intentionjournal*.txt")
    return list(sorted(glob.glob(os.path.expanduser(search_path))))

def get_level(s):
    PREFIXES = ["\t", "    "]
    l = 0
    changed = True
    while changed:
        changed = False
        for p in PREFIXES:
            while s.startswith(p):
                l, s, changed = l+1, s.removeprefix(p), True
    return l

def lines(file):
    file.seek(0, 0)
    ancestry = []
    last_level = 0
    for lineno, line in enumerate(file):
        level = get_level(line)
        if line.strip() == "": # Empty lines maintain indentation
            level = last_level

        # If we indented more than one level at once, add dummy ancestors for the missing levels
        for _ in range(level - last_level - 1):
            ancestry.append(None)
        # If we dedented, pop ancestors
        ancestry = ancestry[:level]

        # We are now an ancestor
        last_level = level
        ancestry.append(lineno)
        #print(lineno, level, repr(line), ancestry)

        yield ancestry, line

last_file=None
def print_line(line, lineno, filename, search, is_match):
    """Figure out your magical custom formatting here"""
    out = f"{filename}:{line.removesuffix("\n")}"
    global last_file
    if filename != last_file and last_file is not None:
        print()
    last_file = filename
    print(out)

def grep(search, file, filename):
    print_all = set()
    print_direct = set()

    for ancestry, line in lines(file):
        if search.casefold() in line.casefold():
            # Queue up some print tasks
            print_all.add(ancestry[-1])
            print_direct.update(ancestry)
    print_direct.discard(None)

    for ancestry, line in lines(file):
        if (    any(x in print_all for x in ancestry) or
                ancestry[-1] in print_direct or
                len(ancestry) > 1 and ancestry[-2] in print_direct):
            print_line(line, lineno=ancestry[-1], filename=filename, search=search,
                is_match=(search.casefold() in line.casefold()))

if __name__ == "__main__":
    files = sys.argv[2:] or default_files()
    search = sys.argv[1]

    for file in files:
        with open(file, "r", encoding="utf8") as f:
            grep(search, f, filename=file)
